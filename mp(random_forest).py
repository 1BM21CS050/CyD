# -*- coding: utf-8 -*-
"""MP(Random forest).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpMW35QYl6cwqLH_ZipQJ-9ZHKtF2j42
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
df = pd.read_csv(r"/content/labeled_tweets.csv")

df1 = df.copy()
df1=df1.drop_duplicates(subset=['full_text'], keep=False)
df1.head()
df1

df1 = df1.dropna()
df1

from sklearn.model_selection import train_test_split

# Assuming 'data' is your DataFrame containing 'id' and 'comments' columns,
# and 'target' is the column you want to predict

# Separate features (X) and target variable (y)
X = df1['full_text']
y = df1['label']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X)
print(y)

df1.to_csv('/content/drive/MyDrive/Miniproject')

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import StandardScaler
import pandas as pd

# Assuming X_train and X_test are DataFrame columns containing text data
# Preprocessing and vectorization
tfidf_vectorizer = TfidfVectorizer()
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_tfidf.toarray())  # Convert to array if sparse matrix
X_test_scaled = scaler.transform(X_test_tfidf.toarray())  # Convert to array if sparse matrix

rfc.feature_importances_

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Preprocess and vectorize text data
tfidf_vectorizer = TfidfVectorizer()
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Initialize and train the RandomForestClassifier
rfc = RandomForestClassifier(criterion='entropy', random_state=42)
rfc.fit(X_train_tfidf, y_train)

# Make predictions on the training set
y_pred_train = rfc.predict(X_train_tfidf)

# Evaluate the model on the training set
print("Classification Report on Training Set:")
print(classification_report(y_train, y_pred_train))

X_test_tfidf = tfidf_vectorizer.transform(X_test)

y_pred_test = rfc.predict(X_test_tfidf)
cm_test = confusion_matrix(y_test, y_pred_test)
print(cm_test)
pd.crosstab(y_test, y_pred_test)

# Print classification report
print("Classification Report on Testing Set:")
print(classification_report(y_test, y_pred_test))

sns.heatmap(cm_test, square=True , annot=True)

cm_train = confusion_matrix(y_train, y_pred_train)
print(cm_train)
pd.crosstab(y_train, y_pred_train)
sns.heatmap(cm_test, square=True , annot=True)